import * as gen from "./generated";
import { isObject } from "util";

export type ObjectMeta = gen.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
export type Container = gen.IoK8sApiCoreV1Container;
export type EnvVar = gen.IoK8sApiCoreV1EnvVar;
export type EnvFromSource = gen.IoK8sApiCoreV1EnvFromSource;
export type Probe = gen.IoK8sApiCoreV1Probe;
export type VolumeMount = gen.IoK8sApiCoreV1VolumeMount;
export type ContainerPort = gen.IoK8sApiCoreV1ContainerPort;
export type ServicePort = gen.IoK8sApiCoreV1ServicePort;
export type IngressRule = gen.IoK8sApiExtensionsV1beta1IngressRule;
export type IngressBackend = gen.IoK8sApiExtensionsV1beta1IngressBackend;

export interface GenericObject {
  apiVersion: string;
  kind: string;
  metadata: ObjectMeta & { name: string };
}

<% for (const o of objects) { %>
export interface <%= o.name %> extends gen.<%= o.type %> {
  kind: "<%= o.name %>";
  apiVersion: string;
  metadata: ObjectMeta & { name: string }
}
<% } %>

export type AnyObject =
<%= objects.map(o => `  | ${o.name}`).join('\n') %>
  | GenericObject;

export const buildObject = (o: AnyObject): AnyObject => o;

<% for (const o of objects) { %>
export const build<%= o.name %> = (o: <%= o.name %>): <%= o.name %> => o;
<% } -%>

<% for (const o of objects) { %>
export const is<%= o.name %> = (o: any): o is <%= o.name %> => {
  return isObject(o) && o.kind === "<%= o.name %>";
};
<% } %>
