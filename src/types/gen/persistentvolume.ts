/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
 */
export interface Persistentvolume {
  /**
   * Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
   */
  status?: {
    /**
     * Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
     */
    phase?: string;
    /**
     * A human-readable message indicating details about why the volume is in this state.
     */
    message?: string;
    /**
     * Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
     */
    reason?: string;
    [k: string]: any;
  };
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string | null;
  /**
   * Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
   */
  spec?: {
    /**
     * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: {
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      /**
       * ID that identifies Photon Controller persistent disk
       */
      pdID: string;
      [k: string]: any;
    };
    /**
     * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is an alpha feature and may change in the future.
     */
    volumeMode?: string;
    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: {
      /**
       * The URI the data disk in the blob storage
       */
      diskURI: string;
      /**
       * The Name of the data disk in the blob storage
       */
      diskName: string;
      /**
       * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * Host Caching mode: None, Read Only, Read Write.
       */
      cachingMode?: string;
      /**
       * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
       */
      kind?: string;
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: {
      /**
       * Optional: FC target worldwide names (WWNs)
       */
      targetWWNs?: string[];
      /**
       * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
       */
      wwids?: string[];
      /**
       * Optional: FC target lun number
       */
      lun?: number;
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     */
    portworxVolume?: {
      /**
       * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * VolumeID uniquely identifies a Portworx volume
       */
      volumeID: string;
      /**
       * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
     */
    glusterfs?: {
      /**
       * Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
       */
      path: string;
      /**
       * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
       */
      readOnly?: boolean;
      /**
       * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
       */
      endpoints: string;
      [k: string]: any;
    };
    /**
     * A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     */
    mountOptions?: string[];
    /**
     * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     */
    scaleIO?: {
      /**
       * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
       */
      storageMode?: string;
      /**
       * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
       */
      secretRef: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * The name of the ScaleIO Protection Domain for the configured storage.
       */
      protectionDomain?: string;
      /**
       * The name of a volume already created in the ScaleIO system that is associated with this volume source.
       */
      volumeName?: string;
      /**
       * Flag to enable/disable SSL communication with Gateway, default false
       */
      sslEnabled?: boolean;
      /**
       * The name of the storage system as configured in ScaleIO.
       */
      system: string;
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
       */
      fsType?: string;
      /**
       * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * The ScaleIO Storage Pool associated with the protection domain.
       */
      storagePool?: string;
      /**
       * The host address of the ScaleIO API Gateway.
       */
      gateway: string;
      [k: string]: any;
    };
    /**
     * CSI represents storage that handled by an external CSI driver (Beta feature).
     */
    csi?: {
      /**
       * NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
       */
      nodeStageSecretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Driver is the name of the driver to use for this volume. Required.
       */
      driver: string;
      /**
       * Attributes of the volume to publish.
       */
      volumeAttributes?: {
        [k: string]: string;
      };
      /**
       * ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
       */
      controllerPublishSecretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
       */
      fsType?: string;
      /**
       * Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
       */
      readOnly?: boolean;
      /**
       * VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
       */
      volumeHandle: string;
      /**
       * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
       */
      nodePublishSecretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
     */
    cinder?: {
      /**
       * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
       */
      readOnly?: boolean;
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
       */
      fsType?: string;
      /**
       * Optional: points to a secret object containing parameters used to connect to OpenStack.
       */
      secretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
       */
      volumeID: string;
      [k: string]: any;
    };
    /**
     * NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     */
    nodeAffinity?: {
      /**
       * Required specifies hard node constraints that must be met.
       */
      required?: {
        /**
         * Required. A list of node selector terms. The terms are ORed.
         */
        nodeSelectorTerms: {
          /**
           * A list of node selector requirements by node's fields.
           */
          matchFields?: {
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
            /**
             * The label key that the selector applies to.
             */
            key: string;
            [k: string]: any;
          }[];
          /**
           * A list of node selector requirements by node's labels.
           */
          matchExpressions?: {
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
            /**
             * The label key that the selector applies to.
             */
            key: string;
            [k: string]: any;
          }[];
          [k: string]: any;
        }[];
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: {
      /**
       * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
       */
      datasetName?: string;
      /**
       * UUID of the dataset. This is unique identifier of a Flocker dataset
       */
      datasetUUID?: string;
      [k: string]: any;
    };
    /**
     * Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     */
    storageClassName?: string;
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: {
      /**
       * Volume is a string that references an already created Quobyte volume by name.
       */
      volume: string;
      /**
       * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
       */
      readOnly?: boolean;
      /**
       * Group to map volume access to Default is no group
       */
      group?: string;
      /**
       * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
       */
      registry: string;
      /**
       * User to map volume access to Defaults to serivceaccount user
       */
      user?: string;
      [k: string]: any;
    };
    /**
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephfs?: {
      /**
       * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
       */
      secretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
       */
      secretFile?: string;
      /**
       * Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
       */
      user?: string;
      /**
       * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
       */
      path?: string;
      /**
       * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
       */
      readOnly?: boolean;
      /**
       * Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
       */
      monitors: string[];
      [k: string]: any;
    };
    /**
     * A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     */
    capacity?: {
      [k: string]: string | number;
    };
    /**
     * AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes?: string[];
    /**
     * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: {
      /**
       * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
       */
      targetPortal: string;
      /**
       * iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
       */
      portals?: string[];
      /**
       * CHAP Secret for iSCSI target and initiator authentication
       */
      secretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
       */
      fsType?: string;
      /**
       * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
       */
      readOnly?: boolean;
      /**
       * whether support iSCSI Session CHAP authentication
       */
      chapAuthSession?: boolean;
      /**
       * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
       */
      initiatorName?: string;
      /**
       * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
       */
      iscsiInterface?: string;
      /**
       * Target iSCSI Qualified Name.
       */
      iqn: string;
      /**
       * whether support iSCSI Discovery CHAP authentication
       */
      chapAuthDiscovery?: boolean;
      /**
       * iSCSI Target Lun number.
       */
      lun: number;
      [k: string]: any;
    };
    /**
     * HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: {
      /**
       * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
       */
      path: string;
      /**
       * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
       */
      type?: string;
      [k: string]: any;
    };
    /**
     * StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://releases.k8s.io/HEAD/examples/volumes/storageos/README.md
     */
    storageos?: {
      /**
       * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
       */
      volumeName?: string;
      /**
       * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
       */
      volumeNamespace?: string;
      /**
       * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
       */
      secretRef?: {
        /**
         * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
         */
        fieldPath?: string;
        /**
         * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
         */
        name?: string;
        /**
         * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
         */
        resourceVersion?: string;
        /**
         * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
         */
        namespace?: string;
        /**
         * API version of the referent.
         */
        apiVersion?: string;
        /**
         * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
         */
        uid?: string;
        [k: string]: any;
      };
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     */
    claimRef?: {
      /**
       * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
       */
      fieldPath?: string;
      /**
       * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
       */
      kind?: string;
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
       */
      name?: string;
      /**
       * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
       */
      resourceVersion?: string;
      /**
       * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
       */
      namespace?: string;
      /**
       * API version of the referent.
       */
      apiVersion?: string;
      /**
       * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
       */
      uid?: string;
      [k: string]: any;
    };
    /**
     * NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: {
      /**
       * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
       */
      path: string;
      /**
       * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
       */
      readOnly?: boolean;
      /**
       * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
       */
      server: string;
      [k: string]: any;
    };
    /**
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: {
      /**
       * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
       */
      readOnly?: boolean;
      /**
       * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
       */
      partition?: number;
      /**
       * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
       */
      pdName: string;
      /**
       * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     */
    persistentVolumeReclaimPolicy?: string;
    /**
     * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     */
    flexVolume?: {
      /**
       * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
       */
      secretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
       */
      fsType?: string;
      /**
       * Driver is the name of the driver to use for this volume.
       */
      driver: string;
      /**
       * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * Optional: Extra command options if any.
       */
      options?: {
        [k: string]: string;
      };
      [k: string]: any;
    };
    /**
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: {
      /**
       * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
       */
      readOnly?: boolean;
      /**
       * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
       */
      partition?: number;
      /**
       * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
       */
      volumeID: string;
      /**
       * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
     */
    rbd?: {
      /**
       * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      secretRef?: {
        /**
         * Namespace defines the space within which the secret name must be unique.
         */
        namespace?: string;
        /**
         * Name is unique within a namespace to reference a secret resource.
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      image: string;
      /**
       * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      keyring?: string;
      /**
       * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
       */
      fsType?: string;
      /**
       * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      readOnly?: boolean;
      /**
       * The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      user?: string;
      /**
       * A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      monitors: string[];
      /**
       * The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
       */
      pool?: string;
      [k: string]: any;
    };
    /**
     * Local represents directly-attached storage with node affinity
     */
    local?: {
      /**
       * The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
       */
      path: string;
      /**
       * Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
       */
      fsType?: string;
      [k: string]: any;
    };
    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: {
      /**
       * Share Name
       */
      shareName: string;
      /**
       * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
       */
      readOnly?: boolean;
      /**
       * the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
       */
      secretNamespace?: string;
      /**
       * the name of secret that contains Azure Storage Account Name and Key
       */
      secretName: string;
      [k: string]: any;
    };
    /**
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: {
      /**
       * Storage Policy Based Management (SPBM) profile name.
       */
      storagePolicyName?: string;
      /**
       * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
       */
      fsType?: string;
      /**
       * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
       */
      storagePolicyID?: string;
      /**
       * Path that identifies vSphere volume vmdk
       */
      volumePath: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string | null;
  /**
   * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
   */
  metadata?: {
    /**
     * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.
     */
    finalizers?: string[];
    /**
     * The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
     */
    clusterName?: string;
    /**
     * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
     */
    deletionGracePeriodSeconds?: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: {
      [k: string]: string;
    };
    /**
     * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
     *
     * If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
     *
     * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
     */
    ownerReferences?: {
      /**
       * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
       */
      kind: string;
      /**
       * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
       */
      blockOwnerDeletion?: boolean;
      /**
       * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
       */
      uid: string;
      /**
       * If true, this reference points to the managing controller.
       */
      controller?: boolean;
      /**
       * API version of the referent.
       */
      apiVersion: string;
      /**
       * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
       */
      name: string;
      [k: string]: any;
    }[];
    /**
     * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
     *
     * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     */
    creationTimestamp?: string;
    /**
     * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
     *
     * Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid?: string;
    /**
     * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name?: string;
    /**
     * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
     *
     * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     */
    deletionTimestamp?: string;
    /**
     * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
     *
     * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
     */
    namespace?: string;
    /**
     * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
     */
    generation?: number;
    /**
     * An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to observe uninitialized objects.
     *
     * When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user.
     */
    initializers?: {
      /**
       * If result is set with the Failure field, the object will be persisted to storage and then deleted, ensuring that other clients can observe the deletion.
       */
      result?: {
        /**
         * Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
         */
        status?: string;
        /**
         * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
         */
        kind?: string;
        /**
         * Suggested HTTP return code for this status, 0 if not set.
         */
        code?: number;
        /**
         * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
         */
        apiVersion?: string;
        /**
         * A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
         */
        reason?: string;
        /**
         * Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
         */
        details?: {
          /**
           * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
           */
          kind?: string;
          /**
           * The group attribute of the resource associated with the status StatusReason.
           */
          group?: string;
          /**
           * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
           */
          name?: string;
          /**
           * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
           */
          retryAfterSeconds?: number;
          /**
           * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
           */
          causes?: {
            /**
             * The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
             *
             * Examples:
             *   "name" - the field "name" on the current resource
             *   "items[0].name" - the field "name" on the first array entry in "items"
             */
            field?: string;
            /**
             * A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
             */
            message?: string;
            /**
             * A machine-readable description of the cause of the error. If this value is empty there is no information available.
             */
            reason?: string;
            [k: string]: any;
          }[];
          /**
           * UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
           */
          uid?: string;
          [k: string]: any;
        };
        /**
         * A human-readable description of the status of this operation.
         */
        message?: string;
        /**
         * Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
         */
        metadata?: {
          /**
           * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
           */
          continue?: string;
          /**
           * selfLink is a URL representing this object. Populated by the system. Read-only.
           */
          selfLink?: string;
          /**
           * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
           */
          resourceVersion?: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
       */
      pending: {
        /**
         * name of the process that is responsible for initializing this object.
         */
        name: string;
        [k: string]: any;
      }[];
      [k: string]: any;
    };
    /**
     * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
     *
     * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion?: string;
    /**
     * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: {
      [k: string]: string;
    };
    /**
     * SelfLink is a URL representing this object. Populated by the system. Read-only.
     */
    selfLink?: string;
    [k: string]: any;
  };
  [k: string]: any;
}
