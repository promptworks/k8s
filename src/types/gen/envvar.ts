/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Deprecated. Please use io.k8s.api.core.v1.EnvVar instead.
 */
export interface Envvar {
  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   */
  valueFrom?: {
    /**
     * Selects a key of a secret in the pod's namespace
     */
    secretKeyRef?: {
      /**
       * Specify whether the Secret or it's key must be defined
       */
      optional?: boolean;
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
       */
      name?: string;
      /**
       * The key of the secret to select from.  Must be a valid secret key.
       */
      key: string;
      [k: string]: any;
    };
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
     */
    fieldRef?: {
      /**
       * Path of the field to select in the specified API version.
       */
      fieldPath: string;
      /**
       * Version of the schema the FieldPath is written in terms of, defaults to "v1".
       */
      apiVersion?: string;
      [k: string]: any;
    };
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: {
      /**
       * Specify whether the ConfigMap or it's key must be defined
       */
      optional?: boolean;
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
       */
      name?: string;
      /**
       * The key to select.
       */
      key: string;
      [k: string]: any;
    };
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: {
      /**
       * Container name: required for volumes, optional for env vars
       */
      containerName?: string;
      /**
       * Required: resource to select
       */
      resource: string;
      /**
       * Specifies the output format of the exposed resources, defaults to "1"
       */
      divisor?: string | number;
      [k: string]: any;
    };
    [k: string]: any;
  };
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   */
  name?: string;
  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   */
  value?: string;
  [k: string]: any;
}
